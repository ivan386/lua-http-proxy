require "socket"require "serialize3"--OEM866local url, host, port, pathrepeat	io.write("Пример URL: http://example.com\n")	io.write("Введите URL: ")	url = io.read("*l")	_, _, host, port, path = url:find("http://([a-z0-9%.-]+):?([0-9]*)(/?.*)")	until hostport = tonumber((#port > 0 and port) or 80)if not (#path > 0) then	path = "/"end print("Host: ", host)print("Port: ", port)print("Path: ", path)print""print("IP адрес.")print ""local ip, ip_info = socket.dns.toip(host)if not ip then	print("Не удалось")	print(ip_info)	print("Смена DNS на 8.8.8.8 может помочь")	returnendprint(ip, serialize(ip_info))print ""print "OK"print ""local ns_command = 'nslookup "-set vc" '..host..' 8.8.8.8'local nslookup = io.popen(ns_command, "rb")local responce = nslookup:read("*a")nslookup:close()print(ns_command)print(responce)local server, err, good_ipfor index, ip in ipairs(ip_info.ip) do	if not responce:find(ip, 1, true) then		print("Подмена DNS ответа: ", ip)		print("Используйте DNSCrypt или VPN для DNS запросов")	else		print("Пробуем подключиться по ip:", ip)		server, err = socket.connect(ip, port)		if server then			good_ip = ip			print("OK")			break		else			print(err)			print"Не получилось"			print""		end	endendif not server then	print(err)	print "Воспользуйтесь внешним проксисервером или анонимайзером."	returnendconnect_headers10 = [[CONNECT %s HTTP/1.1Host: %s]]headers10 = ([[GET %s HTTP/1.1Host: %sConnection: close]])connect_headers = connect_headers10:gsub("(\10)","\13\10")headers = headers10:gsub("(\10)","\13\10")r = string.format(headers, path, host)socket.udp():sendto(r, good_ip, port) --udp testlocal try = 0local data, err, partlocal msg, description = "0. Cтандартный запрос", ""local test_try repeat	if test_try then		try = test_try	end		if try==1 then		msg = "1. Двойной слеш"		description = string.format("\n"..[[В адресной строке браузера достаточно после имени хоста увоить слеш(/).		http://%s:%s/%s]], host, port, path)		r = string.format(headers, "/"..path, host)	elseif try==2 then		msg = "2. Cервер как прокси"		description = string.format("\n"..[[В браузере в качестве прокси сервера для хоста необходимо указать ip и порт хоста. %s %s]], ip, port)				r = string.format(headers, url, host)	elseif try==3 then		msg = "3. Используем поддомен rnd85454"		description = string.format("\n"..[[В браузере к имени домена надо добавить rnd85454http://rnd85454.%s:%s%s]], host, port, path)				r = string.format(headers, path, "rnd85454."..host)	elseif try==4 then		msg = "4. Точка в конце домена"		description = string.format("\n"..[[В браузере к имени домена надо добавить в конце "."http://%s.:%s%s]], host, port, path)				r = string.format(headers, path, host..".")	elseif try==5 then		msg = "5. Используем ip домена"		description = string.format("\n"..[[В браузере вместо имени домена надо использовать iphttp://%s:%s%s]], ip, port, path)				r = string.format(headers, path, ip)	elseif try==6 then		msg = "6. LF вместо CRLF в конце строки"		description = string.format("\n"..[[В данном случае проксисервер меняет конец строки хедера]], host, host)		r = string.format(headers10, path, host)			elseif try==7 then		msg = "7. Host на host"		description = string.format("\n"..[[В данном случае проксисервер меняет хедерHost: %sна host: %s]], host, host)		r = string.format(headers:gsub("\nHost: ", "\nhost: ", 1), path, host)		elseif try==9 then		msg = "7. GET на get"		description = string.format("\n"..[[В данном случае проксисервер меняет хедерGET %s HTTP/1.1на get %s HTTP/1.1]], path, path)		r = string.format(headers:gsub("^GET", "get", 1):gsub("^HEAD", "head", 1), path, host)			elseif try==8 then		msg = "8. Разделение на пакеты"		description = "\n"..[[Проксисервер отправляет хедеры тремя отдельными пакетами]]		r = string.format(headers, path, host)		elseif try==13 then		msg = "13. Альтернативный порт"		port = 80		description = "\n"..[[Проксисервер отправляет хедеры с альтернативным портом в адресе]]		r = string.format(headers, "http://"..host..":8080"..path, host.."")	elseif try==11 then		msg = "11. ip в host"		description = "\n"..[[Проксисервер отправляет домен в GET и IP в Host:]]		r = string.format(headers, "http://"..host..":"..port..path, ip)		elseif try==10 then		msg = "10. ip в path"		description = "\n"..[[Проксисервер отправляет IP в GET и домен в Host:]]		r = string.format(headers, "http://"..ip..":"..port..path, host)			elseif try==12 then		msg = "12. CONNECT"		description = "\n"..[[Проксисервер отправляет CONNECT перед отправкой запроса]]		local ip_port = ip..":"..port;		c = string.format(connect_headers, ip_port, ip_port)		r = string.format(headers, path, host)		end		print ("-------------------------------------------")	print (msg, description)		if try > 0 then		print "Через 5 секунд начнём"		socket.sleep(5)		server, err = socket.connect(good_ip, port)		if not server then			print(err)			print "Не удалось заново соедениться с сервером."			return		end	end		print "Отправляем запрос"	print ""			if try==8 then		print(r)		index, err, index2 = server:send(r:sub(1,6))		print(r:sub(1,6))		index, err, index2 = server:send(r:sub(7, -26))		print(r:sub(7, -26))		r = r:sub(-25)		print(r)	elseif try == 12 then		print(c)		index, err, index2 = server:send(c)		server:settimeout(1)		data, err, part = server:receive("*a")		packet = (data or part)		print(packet)--:sub(1, 100))		print(r)	else		print(r)	end		local index, err, index2 = server:send(r)	if err then		print(err, index2)		print "Не удалось отправить запрос либо он отправился частично."		return	end	server:settimeout(20)	data, err, part = server:receive("*a")	packet = (data or part)	print(packet:sub(1, packet:find("\13\10\13\10")))	_, _, location = packet:find("(Location: [^\n\r]*)")	if location then		print (location)	end	print ""	if not data and err then			print(err)		print"Не удалось"		print ""	end		server:close()		if not test_try then		try = try + 1	end	until  (try >= 14) or test_try	